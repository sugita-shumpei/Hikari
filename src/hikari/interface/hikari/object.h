#ifndef HK_OBJECT__H
#define HK_OBJECT__H
#if !defined(__CUDACC__)

#include <hikari/data_type.h>
#include "uuid.h"

#define HK_OBJECT_TYPEID_Unknown HK_UUID_DEFINE(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)

#define HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(DERIVE, BASE, METHOD, RET_TYPE) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj){ return BASE##_##METHOD((const BASE*)obj); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_1(DERIVE, BASE, METHOD, RET_TYPE) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj){ return BASE##_##METHOD((BASE*)obj); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST_VOID(DERIVE, BASE, METHOD) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj){ BASE##_##METHOD((const BASE*)obj); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_1_VOID(DERIVE, BASE, METHOD) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj){ BASE##_##METHOD((BASE*)obj); }

#define HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1){ return BASE##_##METHOD((const BASE*)obj,ARG_VAL1); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_2(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1){ return BASE##_##METHOD((BASE*)obj,ARG_VAL1); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1){ BASE##_##METHOD((const BASE*)obj,ARG_VAL1); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1){ BASE##_##METHOD((BASE*)obj,ARG_VAL1); }

#define HK_OBJECT_C_DERIVE_METHOD_DECL_3_CONST(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2){ return BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_3(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2){ return BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_3_CONST_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2){  BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_3_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2){  BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2); }

#define HK_OBJECT_C_DERIVE_METHOD_DECL_4_CONST(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3){ return BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_4(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3){ return BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_4_CONST_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3){ BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_4_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3){ BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3); }

#define HK_OBJECT_C_DERIVE_METHOD_DECL_5_CONST(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4){ return BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3, ARG_VAL4); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_5(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4){ return BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3, ARG_VAL4); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_5_CONST_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4){ BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3, ARG_VAL4); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_5_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4){ BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3, ARG_VAL4); }

#define HK_OBJECT_C_DERIVE_METHOD_DECL_6_CONST(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4, ARG_TYPE5, ARG_VAL5) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4, ARG_TYPE5 ARG_VAL5){ return BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3, ARG_VAL4,ARG_VAL5); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_6(DERIVE, BASE, METHOD, RET_TYPE, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4, ARG_TYPE5, ARG_VAL5) \
HK_INLINE RET_TYPE DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4, ARG_TYPE5 ARG_VAL5){ return BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3, ARG_VAL4,ARG_VAL5); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_6_CONST_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4, ARG_TYPE5, ARG_VAL5) \
HK_INLINE void DERIVE##_##METHOD(const DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4, ARG_TYPE5 ARG_VAL5){ BASE##_##METHOD((const BASE*)obj,ARG_VAL1,ARG_VAL2,ARG_VAL3, ARG_VAL4,ARG_VAL5); }
#define HK_OBJECT_C_DERIVE_METHOD_DECL_6_VOID(DERIVE, BASE, METHOD, ARG_TYPE1, ARG_VAL1, ARG_TYPE2, ARG_VAL2, ARG_TYPE3, ARG_VAL3, ARG_TYPE4, ARG_VAL4, ARG_TYPE5, ARG_VAL5) \
HK_INLINE void DERIVE##_##METHOD(DERIVE* obj, ARG_TYPE1 ARG_VAL1, ARG_TYPE2 ARG_VAL2, ARG_TYPE3 ARG_VAL3, ARG_TYPE4 ARG_VAL4, ARG_TYPE5 ARG_VAL5){ BASE##_##METHOD((BASE*)obj,ARG_VAL1,ARG_VAL2, ARG_VAL3, ARG_VAL4,ARG_VAL5); }


#define HK_OBJECT_C_DERIVE_METHODS(TYPE) \
HK_OBJECT_C_DERIVE_METHOD_DECL_1(TYPE, HKUnknown,addRef ,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1(TYPE, HKUnknown,release,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_3(TYPE, HKUnknown,queryInterface,HKBool,HKUUID,iid,void**,ppvInterface)

#if defined(__cplusplus) 
struct HKUnknown {
    static HK_INLINE HK_CXX_CONSTEXPR auto TypeID() HK_CXX_NOEXCEPT -> HKUUID { return HK_OBJECT_TYPEID_Unknown; }
    virtual HKU32  HK_API addRef()  = 0;
    virtual HKU32  HK_API release() = 0;
    virtual HKBool HK_API queryInterface(HKUUID iid, void** ppvInterface) = 0;

    template<typename T>
    HKBool queryInterface(T** ppInterface) { return queryInterface(T::TypeID(), (T**)ppInterface); }
};
#else
typedef struct HKUnknown HKUnknown;
#endif

HK_NAMESPACE_TYPE_ALIAS(Unknown);

HK_EXTERN_C HK_DLL HKU32  HK_API HKUnknown_addRef (HKUnknown* pObj) ;
HK_EXTERN_C HK_DLL HKU32  HK_API HKUnknown_release(HKUnknown* pObj) ;
HK_EXTERN_C HK_DLL HKBool HK_API HKUnknown_queryInterface(HKUnknown* pObj,HKUUID iid, void** ppvInterface) ;

#if defined(__cplusplus)
template<typename T>
HK_INLINE HKU32 HKObject_addRef(T* pObj) { 
    if (!pObj){ return 0; }
    else { return pObj->addRef(); }
}
template<typename T>
HK_INLINE HKU32 HKObject_release(T* pObj) { 
    if (!pObj){ return 0; }
    else { return pObj->release(); }
}
template<typename T>
HK_INLINE HKU32 HKObject_queryInterface(T* pObj, HKUUID iid, void** ppvInterface) {
    if (!pObj){ return false;}
    return pObj->queryInterface(iid,ppvInterface);
}
#endif

#endif
#endif
