#ifndef HK_SHAPE_MESH_UTILS__H
#define HK_SHAPE_MESH_UTILS__H
#include "../shape.h"

#define HK_OBJSUBMESH_C_DERIVE_METHODS(TYPE) \
HK_SHAPE_C_DERIVE_METHODS(TYPE); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1(TYPE,HKSubMesh,internal_getMesh,HKMesh*);  \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,internal_getMesh_const, const HKMesh*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_VOID(TYPE,HKSubMesh,clear); \
HK_OBJECT_C_DERIVE_METHOD_DECL_5_VOID(TYPE,HKSubMesh,setIndices,const HKArrayU32*,indices,HKMeshTopology,topology,HKU32,base_vertex,HKBool,calc_bounds); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKSubMesh,getIndices,HKArrayU32*,HKBool,add_base_vertex); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,getVertexCount,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,getIndexCount ,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,getBaseVertex ,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,getTopology   ,HKMeshTopology); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKSubMesh,getFirstVertex,HKU32)

#define HK_OBJMESH_C_DERIVE_METHODS(TYPE) \
HK_SHAPE_C_DERIVE_METHODS(TYPE); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_VOID( TYPE,HKMesh,clear); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getSubMeshCount,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setSubMeshCount,HKU32,count); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1(TYPE,HKMesh,getSubMeshes,HKArraySubMesh*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getSubMeshTopology,HKMeshTopology,HKU32,submesh_idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getSubMeshIndexCount,HKU32,HKU32,submesh_idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getSubMeshBaseVertex,HKU32,HKU32,submesh_idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getVertexCount,HKU32); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setVertexCount,HKU32,count); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getVertices,HKArrayVec3*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setVertices,const HKArrayVec3*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getVertex ,HKVec3,HKU32,idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getNormals,HKArrayVec3*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setNormals,const HKArrayVec3*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,hasNormal,HKBool); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getTangents,HKArrayVec4*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setTangents,const HKArrayVec4*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,hasTangent,HKBool); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getColors,HKArrayColor*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setColors,const HKArrayColor*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,getColor8s,HKArrayColor8*); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_VOID( TYPE,HKMesh,setColor8s ,const HKArrayColor8*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_CONST(TYPE,HKMesh,hasColor,HKBool); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getUVs,HKArrayVec2*,HKU32,idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_3_VOID( TYPE,HKMesh,setUVs,HKU32,idx,const HKArrayVec2*,arr); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,hasUV,HKBool,HKU32,idx); \
HK_OBJECT_C_DERIVE_METHOD_DECL_2_CONST(TYPE,HKMesh,getIndices,HKArrayU32*,HKBool,add_base_vertex); \
HK_OBJECT_C_DERIVE_METHOD_DECL_1_VOID( TYPE,HKMesh,updateAabb); \
HK_OBJECT_C_DERIVE_METHOD_DECL_3_CONST(TYPE,HKMesh,getSubMeshIndices,HKArrayU32*,HKU32,submesh_idx,HKBool,add_base_vertex); \
HK_OBJECT_C_DERIVE_METHOD_DECL_6_VOID( TYPE,HKMesh,setSubMeshIndices,HKU32,submesh_idx,const HKArrayU32*,indices,HKMeshTopology,topology,HKU32,base_vertex,HKBool,calc_bounds)


#endif
