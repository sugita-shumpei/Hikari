#ifndef HK_MATH_MATRIX__H
#define HK_MATH_MATRIX__H
#include "vec.h"

#define HK_MATH_MAT_EQUAL_EPS 1e-5f
/////////////////////////
// C0.x C1.x C2.x C3.x //
// C0.y C1.y C2.y C3.y //
// C0.z C1.z C2.z C3.z //
// C0.w C1.w C2.w C3.w //
/////////////////////////
#define HK_MATH_MAT2X2_INITIALIZER(C0X,C0Y,C1X,C1Y) c0{C0X,C0Y},c1{C1Y,C1Y}
#define HK_MATH_MAT3X3_INITIALIZER(C0X,C0Y,C0Z,C1X,C1Y,C1Z,C2X,C2Y,C2Z) c0{C0X,C0Y,C0Z},c1{C1X,C1Y,C1Z},c2{C2X,C2Y,C2Z}
#define HK_MATH_MAT4X4_INITIALIZER(C0X,C0Y,C0Z,C0W,C1X,C1Y,C1Z,C1W,C2X,C2Y,C2Z,C2W,C3X,C3Y,C3Z,C3W) c0{C0X,C0Y,C0Z,C0W},c1{C1X,C1Y,C1Z,C1W},c2{C2X,C2Y,C2Z,C2W},c3{C3X,C3Y,C3Z,C3W}

#define HK_MATH_MAT2X2_INITIALIZER_COL(C0,C1) c0{C0},c1{C1}
#define HK_MATH_MAT3X3_INITIALIZER_COL(C0,C1,C2) c0{C0},c1{C1},c2{C2}
#define HK_MATH_MAT4X4_INITIALIZER_COL(C0,C1,C2,C3) c0{C0},c1{C1},c2{C2},c3{C3}

#define HK_MATH_MAT2X2_TYPE_INITIALIZER(C0X,C0Y,C1X,C1Y) HK_TYPE_INITIALIZER(HKMat2x2,HK_TYPE_INITIALIZER(HKVec2,C0X,C0Y),HK_TYPE_INITIALIZER(HKVec2,C1X,C1Y))
#define HK_MATH_MAT3X3_TYPE_INITIALIZER(C0X,C0Y,C0Z,C1X,C1Y,C1Z,C2X,C2Y,C2Z) HK_TYPE_INITIALIZER(HKMat3x3,HK_TYPE_INITIALIZER(HKVec3,C0X,C0Y,C0Z),HK_TYPE_INITIALIZER(HKVec3,C1X,C1Y,C1Z),HK_TYPE_INITIALIZER(HKVec3,C2X,C2Y,C2Z))
#define HK_MATH_MAT4X4_TYPE_INITIALIZER(C0X,C0Y,C0Z,C0W,C1X,C1Y,C1Z,C1W,C2X,C2Y,C2Z,C2W,C3X,C3Y,C3Z,C3W) HK_TYPE_INITIALIZER(HKMat4x4,HK_TYPE_INITIALIZER(HKVec4,C0X,C0Y,C0Z,C0W),HK_TYPE_INITIALIZER(HKVec4,C1X,C1Y,C1Z,C1W),HK_TYPE_INITIALIZER(HKVec4,C2X,C2Y,C2Z,C2W),HK_TYPE_INITIALIZER(HKVec4,C3X,C3Y,C3Z,C3W))

#define HK_MATH_MAT2X2_TYPE_INITIALIZER(C0X,C0Y,C1X,C1Y) HK_TYPE_INITIALIZER(HKMat2x2,HK_TYPE_INITIALIZER(HKVec2,C0X,C0Y),HK_TYPE_INITIALIZER(HKVec2,C1X,C1Y))
#define HK_MATH_MAT3X3_TYPE_INITIALIZER(C0X,C0Y,C0Z,C1X,C1Y,C1Z,C2X,C2Y,C2Z) HK_TYPE_INITIALIZER(HKMat3x3,HK_TYPE_INITIALIZER(HKVec3,C0X,C0Y,C0Z),HK_TYPE_INITIALIZER(HKVec3,C1X,C1Y,C1Z),HK_TYPE_INITIALIZER(HKVec3,C2X,C2Y,C2Z))
#define HK_MATH_MAT4X4_TYPE_INITIALIZER(C0X,C0Y,C0Z,C0W,C1X,C1Y,C1Z,C1W,C2X,C2Y,C2Z,C2W,C3X,C3Y,C3Z,C3W) HK_TYPE_INITIALIZER(HKMat4x4,HK_TYPE_INITIALIZER(HKVec4,C0X,C0Y,C0Z,C0W),HK_TYPE_INITIALIZER(HKVec4,C1X,C1Y,C1Z,C1W),HK_TYPE_INITIALIZER(HKVec4,C2X,C2Y,C2Z,C2W),HK_TYPE_INITIALIZER(HKVec4,C3X,C3Y,C3Z,C3W))

#define HK_MATH_MAT2X2_TYPE_INITIALIZER_COL(C0,C1) HK_TYPE_INITIALIZER(HKMat2x2,C0,C1)
#define HK_MATH_MAT3X3_TYPE_INITIALIZER_COL(C0,C1,C2) HK_TYPE_INITIALIZER(HKMat3x3,C0,C1,C2)
#define HK_MATH_MAT4X4_TYPE_INITIALIZER_COL(C0,C1,C2,C3) HK_TYPE_INITIALIZER(HKMat4x4,C0,C1,C2,C3)

#define HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN(M1,OP,M2) HK_MATH_VEC2_ARITHMETRIC_ASSIGN((M1.c0),OP,(M2.c0)); HK_MATH_VEC2_ARITHMETRIC_ASSIGN((M1.c1),OP,(M2.c1))
#define HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN(M1,OP,M2) HK_MATH_VEC3_ARITHMETRIC_ASSIGN((M1.c0),OP,(M2.c0)); HK_MATH_VEC3_ARITHMETRIC_ASSIGN((M1.c1),OP,(M2.c1)); HK_MATH_VEC3_ARITHMETRIC_ASSIGN((M1.c2),OP,(M2.c2))
#define HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN(M1,OP,M2) HK_MATH_VEC4_ARITHMETRIC_ASSIGN((M1.c0),OP,(M2.c0)); HK_MATH_VEC4_ARITHMETRIC_ASSIGN((M1.c1),OP,(M2.c1)); HK_MATH_VEC4_ARITHMETRIC_ASSIGN((M1.c2),OP,(M2.c2)); HK_MATH_VEC4_ARITHMETRIC_ASSIGN((M1.c3),OP,(M2.c3))

#define HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN_S(M1,OP,S2) HK_MATH_VEC2_ARITHMETRIC_ASSIGN_S((M1.c0),OP,S2); HK_MATH_VEC2_ARITHMETRIC_ASSIGN_S((M1.c1),OP,S2)
#define HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN_S(M1,OP,S2) HK_MATH_VEC3_ARITHMETRIC_ASSIGN_S((M1.c0),OP,S2); HK_MATH_VEC3_ARITHMETRIC_ASSIGN_S((M1.c1),OP,S2); HK_MATH_VEC3_ARITHMETRIC_ASSIGN_S((M1.c2),OP,S2)
#define HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN_S(M1,OP,S2) HK_MATH_VEC4_ARITHMETRIC_ASSIGN_S((M1.c0),OP,S2); HK_MATH_VEC4_ARITHMETRIC_ASSIGN_S((M1.c1),OP,S2); HK_MATH_VEC4_ARITHMETRIC_ASSIGN_S((M1.c2),OP,S2); HK_MATH_VEC4_ARITHMETRIC_ASSIGN_S((M1.c3),OP,S2)

#define HK_MATH_MAT2X2_ARITHMETRIC_INIT(M1,OP,M2) HK_TYPE_INITIALIZER(HKMat2x2,HK_MATH_VEC2_ARITHMETRIC_INIT((M1.c0),OP,(M2.c0)), HK_MATH_VEC2_ARITHMETRIC_INIT((M1.c1),OP,(M2.c1)))
#define HK_MATH_MAT3X3_ARITHMETRIC_INIT(M1,OP,M2) HK_TYPE_INITIALIZER(HKMat3x3,HK_MATH_VEC3_ARITHMETRIC_INIT((M1.c0),OP,(M2.c0)), HK_MATH_VEC3_ARITHMETRIC_INIT((M1.c1),OP,(M2.c1)), HK_MATH_VEC3_ARITHMETRIC_INIT((M1.c2),OP,(M2.c2)))
#define HK_MATH_MAT4X4_ARITHMETRIC_INIT(M1,OP,M2) HK_TYPE_INITIALIZER(HKMat4x4,HK_MATH_VEC4_ARITHMETRIC_INIT((M1.c0),OP,(M2.c0)), HK_MATH_VEC4_ARITHMETRIC_INIT((M1.c1),OP,(M2.c1)), HK_MATH_VEC4_ARITHMETRIC_INIT((M1.c2),OP,(M2.c2)), HK_MATH_VEC4_ARITHMETRIC_INIT((M1.c3),OP,(M2.c3)))

#define HK_MATH_MAT2X2_ARITHMETRIC_INIT_S1(S1,OP,M2) HK_TYPE_INITIALIZER(HKMat2x2,HK_MATH_VEC2_ARITHMETRIC_INIT_S1(S1,OP,(M2.c0)), HK_MATH_VEC2_ARITHMETRIC_INIT_S1(S1,OP,(M2.c1)))
#define HK_MATH_MAT3X3_ARITHMETRIC_INIT_S1(S1,OP,M2) HK_TYPE_INITIALIZER(HKMat3x3,HK_MATH_VEC3_ARITHMETRIC_INIT_S1(S1,OP,(M2.c0)), HK_MATH_VEC3_ARITHMETRIC_INIT_S1(S1,OP,(M2.c1)), HK_MATH_VEC3_ARITHMETRIC_INIT_S1(S1,OP,(M2.c2)))
#define HK_MATH_MAT4X4_ARITHMETRIC_INIT_S1(S1,OP,M2) HK_TYPE_INITIALIZER(HKMat4x4,HK_MATH_VEC4_ARITHMETRIC_INIT_S1(S1,OP,(M2.c0)), HK_MATH_VEC4_ARITHMETRIC_INIT_S1(S1,OP,(M2.c1)), HK_MATH_VEC4_ARITHMETRIC_INIT_S1(S1,OP,(M2.c2)), HK_MATH_VEC4_ARITHMETRIC_INIT_S1(S1,OP,(M2.c3)))

#define HK_MATH_MAT2X2_ARITHMETRIC_INIT_S2(M1,OP,S2) HK_TYPE_INITIALIZER(HKMat2x2,HK_MATH_VEC2_ARITHMETRIC_INIT_S2((M1.c0),OP,S2), HK_MATH_VEC2_ARITHMETRIC_INIT_S2((M1.c1),OP,S2))
#define HK_MATH_MAT3X3_ARITHMETRIC_INIT_S2(M1,OP,S2) HK_TYPE_INITIALIZER(HKMat3x3,HK_MATH_VEC3_ARITHMETRIC_INIT_S2((M1.c0),OP,S2), HK_MATH_VEC3_ARITHMETRIC_INIT_S2((M1.c1),OP,S2), HK_MATH_VEC3_ARITHMETRIC_INIT_S2((M1.c2),OP,S2))
#define HK_MATH_MAT4X4_ARITHMETRIC_INIT_S2(M1,OP,S2) HK_TYPE_INITIALIZER(HKMat4x4,HK_MATH_VEC4_ARITHMETRIC_INIT_S2((M1.c0),OP,S2), HK_MATH_VEC4_ARITHMETRIC_INIT_S2((M1.c1),OP,S2), HK_MATH_VEC4_ARITHMETRIC_INIT_S2((M1.c2),OP,S2), HK_MATH_VEC4_ARITHMETRIC_INIT_S2((M1.c3),OP,S2))

#define HK_MATH_MAT2X2_PASS_ARGUMENT_TO_STACK(M) HK_MATH_VEC2_PASS_ARGUMENT_TO_STACK((M.c0)),HK_MATH_VEC2_PASS_ARGUMENT_TO_STACK((M.c1))
#define HK_MATH_MAT3X3_PASS_ARGUMENT_TO_STACK(M) HK_MATH_VEC3_PASS_ARGUMENT_TO_STACK((M.c0)),HK_MATH_VEC3_PASS_ARGUMENT_TO_STACK((M.c1)),HK_MATH_VEC3_PASS_ARGUMENT_TO_STACK((M.c2))
#define HK_MATH_MAT4X4_PASS_ARGUMENT_TO_STACK(M) HK_MATH_VEC4_PASS_ARGUMENT_TO_STACK((M.c0)),HK_MATH_VEC4_PASS_ARGUMENT_TO_STACK((M.c1)),HK_MATH_VEC4_PASS_ARGUMENT_TO_STACK((M.c2)),HK_MATH_VEC4_PASS_ARGUMENT_TO_STACK((M.c3))

#define HK_MATH_MAT2X2_ROW_VECTOR_PASS_ARGUMENT_TO_STACK(M,V) (M.c0.V), (M.c1.V)
#define HK_MATH_MAT3X3_ROW_VECTOR_PASS_ARGUMENT_TO_STACK(M,V) (M.c0.V), (M.c1.V), (M.c2.V)
#define HK_MATH_MAT4X4_ROW_VECTOR_PASS_ARGUMENT_TO_STACK(M,V) (M.c0.V), (M.c1.V), (M.c2.V), (M.c3.V)

#define HK_MATH_MAT2X2_PASS_ARGUMENT_TO_STACK_TRANSPOSE(M) HK_MATH_MAT2X2_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),x),HK_MATH_MAT2X2_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),y)
#define HK_MATH_MAT3X3_PASS_ARGUMENT_TO_STACK_TRANSPOSE(M) HK_MATH_MAT3X3_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),x),HK_MATH_MAT3X3_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),y),HK_MATH_MAT3X3_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),z)
#define HK_MATH_MAT4X4_PASS_ARGUMENT_TO_STACK_TRANSPOSE(M) HK_MATH_MAT4X4_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),x),HK_MATH_MAT4X4_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),y),HK_MATH_MAT4X4_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),z),HK_MATH_MAT4X4_ROW_VECTOR_PASS_ARGUMENT_TO_STACK((M),w)

#define HK_MATH_MAT2X2_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1,OP,M2) HK_MATH_VEC2_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c0,OP,M2.c0), HK_MATH_VEC2_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c1,OP,M2.c1)
#define HK_MATH_MAT3X3_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1,OP,M2) HK_MATH_VEC3_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c0,OP,M2.c0), HK_MATH_VEC3_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c1,OP,M2.c1), HK_MATH_VEC3_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c2,OP,M2.c2)
#define HK_MATH_MAT4X4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1,OP,M2) HK_MATH_VEC4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c0,OP,M2.c0), HK_MATH_VEC4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c1,OP,M2.c1), HK_MATH_VEC4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c2,OP,M2.c2), HK_MATH_VEC4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK(M1.c3,OP,M2.c3)

#define HK_MATH_MAT2X2_ROW_VECTOR_TYPE_INITIALIZER(M,V) HK_TYPE_INITIALIZER(HKVec2,(M.c0.V), (M.c1.V))
#define HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(M,V) HK_TYPE_INITIALIZER(HKVec3,(M.c0.V), (M.c1.V), (M.c2.V))
#define HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER(M,V) HK_TYPE_INITIALIZER(HKVec4,(M.c0.V), (M.c1.V), (M.c2.V), (M.c3.V))

#define HK_MATH_MAT2X2_CLONE(M) HK_TYPE_INITIALIZER(HKMat2x2,M.c0,M.c1)
#define HK_MATH_MAT3X3_CLONE(M) HK_TYPE_INITIALIZER(HKMat3x3,M.c0,M.c1,M.c2)
#define HK_MATH_MAT4X4_CLONE(M) HK_TYPE_INITIALIZER(HKMat4x4,M.c0,M.c1,M.c2,M.c3)

#define HK_MATH_MAT2X2_CLONE_TRANSPOSE(M) HK_TYPE_INITIALIZER(HKMat2x2,HK_MATH_MAT2X2_ROW_VECTOR_TYPE_INITIALIZER(M,x),HK_MATH_MAT2X2_ROW_VECTOR_TYPE_INITIALIZER(M,y))
#define HK_MATH_MAT3X3_CLONE_TRANSPOSE(M) HK_TYPE_INITIALIZER(HKMat3x3,HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(M,x),HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(M,y),HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(M,z))
#define HK_MATH_MAT4X4_CLONE_TRANSPOSE(M) HK_TYPE_INITIALIZER(HKMat4x4,HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER(M,x),HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER(M,y),HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER(M,z),HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER(M,w))

typedef struct HKCMat2x2 { HKCVec2 c0; HKCVec2 c1; } HKCMat2x2;
#if defined(__cplusplus)
typedef struct HKMat2x2 {
	HK_CXX11_CONSTEXPR HKMat2x2() HK_CXX_NOEXCEPT:HK_MATH_MAT2X2_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f) {}
	HK_CXX11_CONSTEXPR HKMat2x2(HKF32 s) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER(s, 0.0f, 0.0f, s) {}
	HK_CXX11_CONSTEXPR HKMat2x2(HKF32 c0x, HKF32 c0y, HKF32 c1x, HKF32 c1y) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER(c0x,c0y,c1x,c1y) {}
	HK_CXX11_CONSTEXPR HKMat2x2(const HKVec2& v) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER(v.x, 0.0f, 0.0f, v.y) {}
	HK_CXX11_CONSTEXPR HKMat2x2(const HKVec2& c0, const HKVec2& c1) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER_COL(c0, c1) {}
	HK_CXX11_CONSTEXPR HKMat2x2(const HKMat2x2& m) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER_COL((m.c0), (m.c1)) {}
	HK_CXX11_CONSTEXPR HKMat2x2(const HKCMat2x2& m) HK_CXX_NOEXCEPT : HK_MATH_MAT2X2_INITIALIZER_COL(HKVec2(m.c0), HKVec2(m.c1)) {}
	HK_CXX14_CONSTEXPR HKMat2x2& operator=(const HKMat2x2& m) HK_CXX_NOEXCEPT { if (this != &m) { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_CXX14_CONSTEXPR HKMat2x2& operator=(const HKCMat2x2& m) HK_CXX_NOEXCEPT {  { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& operator+=(const HKMat2x2& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& operator-=(const HKMat2x2& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& operator*=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& operator/=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_CXX11_CONSTEXPR           HKMat2x2  operator+() const HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER_COL(+c0, +c1); }
	HK_CXX11_CONSTEXPR           HKMat2x2  operator-() const HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER_COL(-c0, -c1); }
	HK_INLINE HK_CXX11_CONSTEXPR operator HKCMat2x2() const HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKCMat2x2,HKCVec2(c0), HKCVec2(c1)); }
	HK_INLINE HK_CXX11_CONSTEXPR HKF32    determinant() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 transpose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 inverse() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 inverseTranspose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec2 getR0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec2 getR1() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec2 getC0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec2 getC1() const HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 identity() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 zeros() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 scale(const HKVec2& scaling) HK_CXX_NOEXCEPT;
	HKVec2 c0;
	HKVec2 c1;
} HKMat2x2;
#else
typedef struct HKCMat2x2 HKMat2x2;
#endif
typedef struct HKCMat3x3 { HKCVec3 c0; HKCVec3 c1; HKCVec3 c2; } HKCMat3x3;
#if defined(__cplusplus)
typedef struct HKMat3x3 {
	HK_CXX11_CONSTEXPR HKMat3x3() HK_CXX_NOEXCEPT:HK_MATH_MAT3X3_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f) {}
	HK_CXX11_CONSTEXPR HKMat3x3(HKF32 s) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER(s, 0.0f, 0.0f, 0.0f, s, 0.0f, 0.0f, 0.0f,s) {}
	HK_CXX11_CONSTEXPR HKMat3x3(HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c2x, HKF32 c2y, HKF32 c2z) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER(c0x, c0y, c0z, c1x, c1y,c1z,c2x,c2y,c2z) {}
	HK_CXX11_CONSTEXPR HKMat3x3(const HKVec3& v) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER(v.x, 0.0f, 0.0f, 0.0f, v.y, 0.0f, 0.0f, 0.0f,v.z) {}
	HK_CXX11_CONSTEXPR HKMat3x3(const HKVec3& c0, const HKVec3& c1, const HKVec3& c2) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER_COL(c0, c1,c2) {}
	HK_CXX11_CONSTEXPR HKMat3x3(const HKMat3x3& m) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER_COL((m.c0), (m.c1),(m.c2)) {}
	HK_CXX11_CONSTEXPR HKMat3x3(const HKCMat3x3& m) HK_CXX_NOEXCEPT : HK_MATH_MAT3X3_INITIALIZER_COL(HKCVec3(m.c0), HKCVec3(m.c1), HKCVec3(m.c2)) {}
	HK_CXX14_CONSTEXPR HKMat3x3& operator=(const HKMat3x3& m) HK_CXX_NOEXCEPT { if (this != &m) { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_CXX14_CONSTEXPR HKMat3x3& operator=(const HKCMat3x3& m) HK_CXX_NOEXCEPT { { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& operator+=(const HKMat3x3& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& operator-=(const HKMat3x3& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& operator*=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& operator/=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_CXX11_CONSTEXPR           HKMat3x3  operator+() const HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER_COL(+c0, +c1, +c2); }
	HK_CXX11_CONSTEXPR           HKMat3x3  operator-() const HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER_COL(-c0, -c1, -c2); }
	HK_INLINE HK_CXX11_CONSTEXPR operator HKCMat3x3() const HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKCMat3x3, HKCVec3(c0), HKCVec3(c1), HKCVec3(c2)); }
	HK_INLINE HK_CXX11_CONSTEXPR HKF32    determinant() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 transpose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 inverse() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 inverseTranspose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getR0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getR1() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getR2() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getC0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getC1() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec3 getC2() const HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 identity() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 zeros() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 scale(const HKVec2& scaling) HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 scale(const HKVec3& scaling) HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 translate(const HKVec2& position) HK_CXX_NOEXCEPT;
	HKVec3 c0; 
	HKVec3 c1; 
	HKVec3 c2;
} HKMat3x3;
#else
typedef struct HKCMat3x3 HKMat3x3;
#endif
typedef struct HKCMat4x4 { HKCVec4 c0; HKCVec4 c1; HKCVec4 c2; HKCVec4 c3; } HKCMat4x4;
#if defined(__cplusplus)
typedef struct HKMat4x4 {
	HK_CXX11_CONSTEXPR HKMat4x4() HK_CXX_NOEXCEPT:HK_MATH_MAT4X4_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f) {}
	HK_CXX11_CONSTEXPR HKMat4x4(HKF32 s) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER(s, 0.0f, 0.0f, 0.0f, 0.0f, s, 0.0f, 0.0f, 0.0f, 0.0f, s,0.0f, 0.0f, 0.0f, 0.0f, s) {}
	HK_CXX11_CONSTEXPR HKMat4x4(HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c0w, HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c1w, HKF32 c2x, HKF32 c2y, HKF32 c2z, HKF32 c2w, HKF32 c3x, HKF32 c3y, HKF32 c3z, HKF32 c3w) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER(c0x, c0y, c0z, c0w, c1x, c1y, c1z, c1w, c2x, c2y, c2z, c2w, c3x, c3y, c3z, c3w) {}
	HK_CXX11_CONSTEXPR HKMat4x4(const HKVec4& v) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER(v.x, 0.0f, 0.0f, 0.0f, 0.0f, v.y, 0.0f, 0.0f, 0.0f, 0.0f, v.z, 0.0f, 0.0f, 0.0f, 0.0f, v.w) {}
	HK_CXX11_CONSTEXPR HKMat4x4(const HKVec4& c0, const HKVec4& c1, const HKVec4& c2, const HKVec4& c3) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER_COL(c0, c1, c2, c3) {}
	HK_CXX11_CONSTEXPR HKMat4x4(const HKMat4x4& m) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER_COL((m.c0), (m.c1), (m.c2), (m.c3)) {}
	HK_CXX11_CONSTEXPR HKMat4x4(const HKCMat4x4& m) HK_CXX_NOEXCEPT : HK_MATH_MAT4X4_INITIALIZER_COL(HKCVec4(m.c0), HKCVec4(m.c1), HKCVec4(m.c2), HKCVec4(m.c3)) {}
	HK_CXX14_CONSTEXPR HKMat4x4& operator=(const HKMat4x4& m) HK_CXX_NOEXCEPT { if (this != &m) { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_CXX14_CONSTEXPR HKMat4x4& operator=(const HKCMat4x4& m) HK_CXX_NOEXCEPT { { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN((*this), =, m); } return *this; }
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& operator+=(const HKMat4x4& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& operator-=(const HKMat4x4& m) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& operator*=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& operator/=(HKF32 s) HK_CXX_NOEXCEPT;
	HK_CXX11_CONSTEXPR           HKMat4x4  operator+() const HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER_COL(+c0, +c1, +c2, +c3); }
	HK_CXX11_CONSTEXPR           HKMat4x4  operator-() const HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER_COL(-c0, -c1, -c2, -c3); }
	HK_INLINE HK_CXX11_CONSTEXPR operator HKCMat4x4() const HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKCMat4x4,HKCVec4(c0), HKCVec4(c1), HKCVec4(c2), HKCVec4(c3)); }
	HK_INLINE HK_CXX11_CONSTEXPR HKF32    determinant() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 transpose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 inverse() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 inverseTranspose() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getR0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getR1() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getR2() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getR3() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getC0() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getC1() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getC2() const HK_CXX_NOEXCEPT;
	HK_INLINE HK_CXX11_CONSTEXPR HKVec4 getC3() const HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 identity() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 zeros() HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 scale(const HKVec3& scaling) HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 scale(const HKVec4& scaling) HK_CXX_NOEXCEPT;
	static HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 translate(const HKVec3& position) HK_CXX_NOEXCEPT;
	HKVec4 c0;
	HKVec4 c1;
	HKVec4 c2;
	HKVec4 c3;
} HKMat4x4;
#else
typedef struct HKCMat4x4 HKMat4x4;
#endif

HK_NAMESPACE_TYPE_ALIAS(Mat2x2);
HK_NAMESPACE_TYPE_ALIAS(Mat3x3);
HK_NAMESPACE_TYPE_ALIAS(Mat4x4);

// �s�x�N�g��: 2
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_create() HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_create1(HKF32 s) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(s, 0.0f, 0.0f, s); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_create2(HKF32 sx, HKF32 sy) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(sx, 0.0f, 0.0f, sy); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_create4(HKF32 c0x, HKF32 c0y, HKF32 c1x, HKF32 c1y) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(c0x,c0y,c1x,c1y); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_rowVector0(const HKMat2x2* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ROW_VECTOR_TYPE_INITIALIZER((*m),x); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_rowVector1(const HKMat2x2* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ROW_VECTOR_TYPE_INITIALIZER((*m),y); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_colVector0(const HKMat2x2* m) HK_CXX_NOEXCEPT { return (*m).c0; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_colVector1(const HKMat2x2* m) HK_CXX_NOEXCEPT { return (*m).c1; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_mulVector_v1(const HKVec2* v1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec2,HKVec2_dot(v1,&(m2->c0)), HKVec2_dot(v1, &(m2->c1))); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2_mulVector_v2(const HKMat2x2* m1, const HKVec2* v2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec2,HKVec2_dot_stack_1(HKMat2x2_rowVector0(m1),v2), HKVec2_dot_stack_1(HKMat2x2_rowVector1(m1), v2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat2x2_assignAdd(HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN((*m1), +=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat2x2_assignSub(HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN((*m1), -=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat2x2_assignMul_s2(HKMat2x2* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN_S((*m1), *=, s2); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat2x2_assignDiv_s2(HKMat2x2* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT2X2_ARITHMETRIC_ASSIGN_S((*m1), /=, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_add(const HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ARITHMETRIC_INIT((*m1), +, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_sub(const HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ARITHMETRIC_INIT((*m1), -, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_mul_s1(HKF32 s1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ARITHMETRIC_INIT_S1(s1, *, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_mul_s2(const HKMat2x2* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ARITHMETRIC_INIT_S2((*m1), *, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_div_s2(const HKMat2x2* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_ARITHMETRIC_INIT_S2((*m1), /, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_mul(const HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER_COL(HKMat2x2_mulVector_v2(m1, &(m2->c0)), HKMat2x2_mulVector_v2(m1, &(m2->c1))); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_identity() HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(1.0f, 0.0f, 0.0f, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_zeros() HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_scale_2(const HKVec2* scaling) HK_CXX_NOEXCEPT { return HK_MATH_MAT2X2_TYPE_INITIALIZER(scaling->x, 0.0f, scaling->y, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2_transpose(const HKMat2x2* m) HK_CXX_NOEXCEPT  { return HK_MATH_MAT2X2_CLONE_TRANSPOSE((*m)); }
HK_INLINE HK_CXX14_CONSTEXPR HKF32    HKMat2x2_determinant(const HKMat2x2* m) HK_CXX_NOEXCEPT {return m->c0.x * m->c1.y - m->c0.y * m->c1.x;}
HK_INLINE HK_CXX14_CONSTEXPR HKF32    HKMat2x2_determinant_stack(
	HKF32 c0x, HKF32 c0y,
	HKF32 c1x, HKF32 c1y
) HK_CXX_NOEXCEPT {
	return c0x * c1y - c0y * c1x;
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 HKMat2x2_inverse_stack(
	HKF32 c0x, HKF32 c0y,
	HKF32 c1x, HKF32 c1y
) HK_CXX_NOEXCEPT {
	HKF32 inv_det = 1.0f/(c0x * c1y - c0y * c1x);
	return HK_MATH_MAT2X2_TYPE_INITIALIZER((inv_det*c1y), (-inv_det*c0y), (-inv_det*c1x), (inv_det*c0x));
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 HKMat2x2_inverse(const HKMat2x2* m1) HK_CXX_NOEXCEPT { return HKMat2x2_inverse_stack(HK_MATH_MAT2X2_PASS_ARGUMENT_TO_STACK((*m1))); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 HKMat2x2_inverseTranspose(const HKMat2x2* m1) HK_CXX_NOEXCEPT { return HKMat2x2_inverse_stack(HK_MATH_MAT2X2_PASS_ARGUMENT_TO_STACK_TRANSPOSE((*m1))); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat2x2_equal_withEps(const HKMat2x2* m1, const HKMat2x2* m2, HKF32 eps) HK_CXX_NOEXCEPT {
	return HKMat2x2_determinant_stack(HK_MATH_MAT2X2_ARITHMETRIC_PASS_ARGUMENT_TO_STACK((*m1), -, (*m2))) < HKMath_fmaxf(HKMat2x2_determinant(m1), HKMat2x2_determinant(m2)) * eps * eps * eps;
}
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat2x2_equal(const HKMat2x2* m1, const HKMat2x2* m2) HK_CXX_NOEXCEPT { return HKMat2x2_equal_withEps(m1, m2, HK_MATH_MAT_EQUAL_EPS); }
// �s�x�N�g��: 3
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_create() HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_create1(HKF32 s) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(s, 0.0f, 0.0f, 0.0f, s, 0.0f, 0.0f, 0.0f, s); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_create3(HKF32 sx, HKF32 sy, HKF32 sz) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(sx, 0.0f, 0.0f, 0.0f, sy, 0.0f, 0.0f, 0.0f, sz); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_create9(HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c2x, HKF32 c2y, HKF32 c2z) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(c0x, c0y, c0z, c1x, c1y, c1z, c2x, c2y, c2z); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_rowVector0(const HKMat3x3* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER((*m),x); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_rowVector1(const HKMat3x3* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER((*m),y); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_rowVector2(const HKMat3x3* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER((*m),z); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_colVector0(const HKMat3x3* m) HK_CXX_NOEXCEPT { return (*m).c0; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_colVector1(const HKMat3x3* m) HK_CXX_NOEXCEPT { return (*m).c1; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_colVector2(const HKMat3x3* m) HK_CXX_NOEXCEPT { return (*m).c2; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v1(const HKVec3* v1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot(v1, &(m2->c0)), HKVec3_dot(v1, &(m2->c1)), HKVec3_dot(v1, &(m2->c2))); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v2(const HKMat3x3* m1, const HKVec3* v2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot_stack_1(HKMat3x3_rowVector0(m1), v2), HKVec3_dot_stack_1(HKMat3x3_rowVector1(m1), v2), HKVec3_dot_stack_1(HKMat3x3_rowVector2(m1), v2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v1_stack_m2(const HKVec3* v1, const HKMat3x3 HK_REF m2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot_stack_2(v1, m2.c0), HKVec3_dot_stack_2(v1, m2.c1), HKVec3_dot_stack_2(v1,m2.c2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v1_stack(const HKVec3 HK_REF v1, const HKMat3x3 HK_REF m2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot_stack(v1, m2.c0), HKVec3_dot_stack(v1, m2.c1), HKVec3_dot_stack(v1, m2.c2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v2_stack_m1(const HKMat3x3 HK_REF m1, const HKVec3* v2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot_stack_1(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1,x), v2), HKVec3_dot_stack_1(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1, y), v2), HKVec3_dot_stack_1(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1, z), v2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3_mulVector_v2_stack(const HKMat3x3 HK_REF m1, const HKVec3 HK_REF v2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec3, HKVec3_dot_stack(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1,x), v2), HKVec3_dot_stack(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1, y), v2), HKVec3_dot_stack(HK_MATH_MAT3X3_ROW_VECTOR_TYPE_INITIALIZER(m1, z), v2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat3x3_assignAdd(HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN((*m1), +=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat3x3_assignSub(HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN((*m1), -=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat3x3_assignMul_s2(HKMat3x3* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN_S((*m1), *=, s2); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat3x3_assignDiv_s2(HKMat3x3* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT3X3_ARITHMETRIC_ASSIGN_S((*m1), /=, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_add(const HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ARITHMETRIC_INIT((*m1), +, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_sub(const HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ARITHMETRIC_INIT((*m1), -, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_mul_s1(HKF32 s1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ARITHMETRIC_INIT_S1(s1, *, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_mul_s2(const HKMat3x3* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ARITHMETRIC_INIT_S2((*m1), *, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_div_s2(const HKMat3x3* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_ARITHMETRIC_INIT_S2((*m1), /, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_mul(const HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER_COL(HKMat3x3_mulVector_v2(m1, &(m2->c0)), HKMat3x3_mulVector_v2(m1, &(m2->c1)), HKMat3x3_mulVector_v2(m1, &(m2->c2))); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_identity() HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_zeros() HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_scale_2(const HKVec2* scaling) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(scaling->x, 0.0f, 0.0f, 0.0f, scaling->y, 0.0f, 0.0f, 0.0f, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_scale_3(const HKVec3* scaling) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(scaling->x, 0.0f, 0.0f, 0.0f, scaling->y, 0.0f, 0.0f, 0.0f, scaling->z); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_translate_2(const HKVec2* position) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_TYPE_INITIALIZER(1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, position->x, position->y, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3_transpose(const HKMat3x3* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT3X3_CLONE_TRANSPOSE((*m)); }
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat3x3_determinant(const HKMat3x3* m) HK_CXX_NOEXCEPT {
	return  m->c0.x * (m->c1.y * m->c2.z - m->c2.y * m->c1.z) - m->c0.y * (m->c1.x * m->c2.z - m->c1.z * m->c2.x) + m->c0.z * (m->c1.x * m->c2.y - m->c1.y * m->c2.x);
}
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat3x3_determinant_stack(
	HKF32 c0x, HKF32 c0y, HKF32 c0z,
	HKF32 c1x, HKF32 c1y, HKF32 c1z,
	HKF32 c2x, HKF32 c2y, HKF32 c2z
) HK_CXX_NOEXCEPT {
	return  c0x * (c1y * c2z - c2y * c1z) - c0y * (c1x * c2z - c1z * c2x) + c0z * (c1x * c2y - c1y * c2x);
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 HKMat3x3_inverse_stack(
	HKF32 c0x, HKF32 c0y, HKF32 c0z,
	HKF32 c1x, HKF32 c1y, HKF32 c1z,
	HKF32 c2x, HKF32 c2y, HKF32 c2z
) HK_CXX_NOEXCEPT {
	HKF32 det = c0x * (c1y * c2z - c2y * c1z) - c0y * (c1x * c2z - c1z * c2x) + c0z * (c1x * c2y - c1y * c2x);
	HKF32 invdet = 1.0f / det;

	HKMat3x3 m = HK_MATH_MAT3X3_TYPE_INITIALIZER(0.0f,0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f); // inverse of matrix m
	m.c0.x = (c1y * c2z - c2y * c1z) * invdet;
	m.c0.y = (c0z * c2y - c0y * c2z) * invdet;
	m.c0.z = (c0y * c1z - c0z * c1y) * invdet;
	m.c1.x = (c1z * c2x - c1x * c2z) * invdet;
	m.c1.y = (c0x * c2z - c0z * c2x) * invdet;
	m.c1.z = (c1x * c0z - c0x * c1z) * invdet;
	m.c2.x = (c1x * c2y - c2x * c1y) * invdet;
	m.c2.y = (c2x * c0y - c0x * c2y) * invdet;
	m.c2.z = (c0x * c1y - c1x * c0y) * invdet;
	return m;
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 HKMat3x3_inverse(const HKMat3x3* m1) HK_CXX_NOEXCEPT { return HKMat3x3_inverse_stack(HK_MATH_MAT3X3_PASS_ARGUMENT_TO_STACK((*m1))); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 HKMat3x3_inverseTranspose(const HKMat3x3* m1) HK_CXX_NOEXCEPT { return HKMat3x3_inverse_stack(HK_MATH_MAT3X3_PASS_ARGUMENT_TO_STACK_TRANSPOSE((*m1))); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat3x3_equal_withEps(const HKMat3x3* m1, const HKMat3x3* m2, HKF32 eps) HK_CXX_NOEXCEPT {
	return HKMat3x3_determinant_stack(HK_MATH_MAT3X3_ARITHMETRIC_PASS_ARGUMENT_TO_STACK((*m1), -, (*m2))) < HKMath_fmaxf(HKMat3x3_determinant(m1), HKMat3x3_determinant(m2)) * eps * eps * eps;
}
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat3x3_equal(const HKMat3x3* m1, const HKMat3x3* m2) HK_CXX_NOEXCEPT { return HKMat3x3_equal_withEps(m1, m2, HK_MATH_MAT_EQUAL_EPS); }
// �s�x�N�g��: 4
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_create() HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_create1(HKF32 s) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(s, 0.0f, 0.0f, 0.0f, 0.0f, s, 0.0f, 0.0f, 0.0f, 0.0f, s, 0.0f, 0.0f, 0.0f, 0.0f, s); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_create4(HKF32 sx, HKF32 sy, HKF32 sz, HKF32 sw) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(sx, 0.0f, 0.0f, 0.0f, 0.0f, sy, 0.0f, 0.0f, 0.0f, 0.0f, sz, 0.0f, 0.0f, 0.0f, 0.0f, sw); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_create16(HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c0w, HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c1w, HKF32 c2x, HKF32 c2y, HKF32 c2z, HKF32 c2w, HKF32 c3x, HKF32 c3y, HKF32 c3z, HKF32 c3w) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(c0x, c0y, c0z, c0w, c1x, c1y, c1z, c1w, c2x, c2y, c2z, c2w, c3x, c3y, c3z, c3w); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_rowVector0(const HKMat4x4* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER((*m), x); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_rowVector1(const HKMat4x4* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER((*m), y); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_rowVector2(const HKMat4x4* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER((*m), z); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_rowVector3(const HKMat4x4* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ROW_VECTOR_TYPE_INITIALIZER((*m), w); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_colVector0(const HKMat4x4* m) HK_CXX_NOEXCEPT { return (*m).c0; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_colVector1(const HKMat4x4* m) HK_CXX_NOEXCEPT { return (*m).c1; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_colVector2(const HKMat4x4* m) HK_CXX_NOEXCEPT { return (*m).c2; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_colVector3(const HKMat4x4* m) HK_CXX_NOEXCEPT { return (*m).c3; }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_mulVector_v1(const HKVec4* v1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HK_TYPE_INITIALIZER(HKVec4, HKVec4_dot((v1), &(m2->c0)), HKVec4_dot((v1), &(m2->c1)), HKVec4_dot((v1), &(m2->c2)), HKVec4_dot((v1), &(m2->c3))); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4_mulVector_v2(const HKMat4x4* m1, const HKVec4* v2) HK_CXX_NOEXCEPT  { return HK_TYPE_INITIALIZER(HKVec4, HKVec4_dot_stack_1(HKMat4x4_rowVector0(m1), v2), HKVec4_dot_stack_1(HKMat4x4_rowVector1(m1), v2), HKVec4_dot_stack_1(HKMat4x4_rowVector2(m1), v2), HKVec4_dot_stack_1(HKMat4x4_rowVector3(m1), v2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat4x4_assignAdd(HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN((*m1), +=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat4x4_assignSub(HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN((*m1), -=, (*m2)); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat4x4_assignMul_s2(HKMat4x4* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN_S((*m1), *=, s2); }
HK_INLINE HK_CXX14_CONSTEXPR void   HKMat4x4_assignDiv_s2(HKMat4x4* m1, HKF32 s2) HK_CXX_NOEXCEPT { HK_MATH_MAT4X4_ARITHMETRIC_ASSIGN_S((*m1), /=, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_add(const HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ARITHMETRIC_INIT((*m1), +, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_sub(const HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ARITHMETRIC_INIT((*m1), -, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_mul_s1(HKF32 s1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ARITHMETRIC_INIT_S1(s1, *, (*m2)); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_mul_s2(const HKMat4x4* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ARITHMETRIC_INIT_S2((*m1), *, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_div_s2(const HKMat4x4* m1, HKF32 s2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_ARITHMETRIC_INIT_S2((*m1), /, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_mul(const HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER_COL(HKMat4x4_mulVector_v2(m1,&(m2->c0)), HKMat4x4_mulVector_v2(m1, &(m2->c1)), HKMat4x4_mulVector_v2(m1, &(m2->c2)), HKMat4x4_mulVector_v2(m1, &(m2->c3))); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_identity() HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_zeros() HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_scale_3(const HKVec3* scaling) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(scaling->x, 0.0f, 0.0f, 0.0f, 0.0f, scaling->y, 0.0f, 0.0f, 0.0f, 0.0f, scaling->z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_scale_4(const HKVec4* scaling) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(scaling->x, 0.0f, 0.0f, 0.0f, 0.0f, scaling->y, 0.0f, 0.0f, 0.0f, 0.0f, scaling->z, 0.0f, 0.0f, 0.0f, 0.0f, scaling->w); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_translate_3(const HKVec3* position) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_TYPE_INITIALIZER(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, position->x, position->y, position->z, 1.0f); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4_transpose(const HKMat4x4* m) HK_CXX_NOEXCEPT { return HK_MATH_MAT4X4_CLONE_TRANSPOSE((*m)); }
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat4x4_determinant(const HKMat4x4* m)HK_CXX_NOEXCEPT {
	return ((m->c0.x * m->c1.y - m->c1.x * m->c0.y) *
		(m->c2.z * m->c3.w - m->c3.z * m->c2.w) -
		(m->c0.x * m->c1.z - m->c1.x * m->c0.z) *
		(m->c2.y * m->c3.w - m->c3.y * m->c2.w) +
		(m->c0.x * m->c1.w - m->c1.x * m->c0.w) *
		(m->c2.y * m->c3.z - m->c3.y * m->c2.z) +
		(m->c0.y * m->c1.z - m->c1.y * m->c0.z) *
		(m->c2.x * m->c3.w - m->c3.x * m->c2.w) -
		(m->c0.y * m->c1.w - m->c1.y * m->c0.w) *
		(m->c2.x * m->c3.z - m->c3.x * m->c2.z) +
		(m->c0.z * m->c1.w - m->c1.z * m->c0.w) *
		(m->c2.x * m->c3.y - m->c3.x * m->c2.y));
}
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat4x4_determinant_stack(
	HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c0w,
	HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c1w,
	HKF32 c2x, HKF32 c2y, HKF32 c2z, HKF32 c2w,
	HKF32 c3x, HKF32 c3y, HKF32 c3z, HKF32 c3w)HK_CXX_NOEXCEPT {
	return ((c0x * c1y - c1x * c0y) *
		(c2z * c3w - c3z * c2w) -
		(c0x * c1z - c1x * c0z) *
		(c2y * c3w - c3y * c2w) +
		(c0x * c1w - c1x * c0w) *
		(c2y * c3z - c3y * c2z) +
		(c0y * c1z - c1y * c0z) *
		(c2x * c3w - c3x * c2w) -
		(c0y * c1w - c1y * c0w) *
		(c2x * c3z - c3x * c2z) +
		(c0z * c1w - c1z * c0w) *
		(c2x * c3y - c3x * c2y));
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 HKMat4x4_inverse_stack(
	HKF32 c0x, HKF32 c0y, HKF32 c0z, HKF32 c0w,
	HKF32 c1x, HKF32 c1y, HKF32 c1z, HKF32 c1w,
	HKF32 c2x, HKF32 c2y, HKF32 c2z, HKF32 c2w,
	HKF32 c3x, HKF32 c3y, HKF32 c3z, HKF32 c3w
) HK_CXX_NOEXCEPT {
	// ��{�I��4x4�t�s��̍����v�Z�ł͗]���q�W�J���g���Č����I�ɕϊ�����
	HKF32 s0 = c0x * c1y - c1x * c0y;
	HKF32 s1 = c0x * c1z - c1x * c0z;
	HKF32 s2 = c0x * c1w - c1x * c0w;
	HKF32 s3 = c0y * c1z - c1y * c0z;
	HKF32 s4 = c0y * c1w - c1y * c0w;
	HKF32 s5 = c0z * c1w - c1z * c0w;

	HKF32 c5 = c2z * c3w - c3z * c2w;
	HKF32 c4 = c2y * c3w - c3y * c2w;
	HKF32 c3 = c2y * c3z - c3y * c2z;
	HKF32 c2 = c2x * c3w - c3x * c2w;
	HKF32 c1 = c2x * c3z - c3x * c2z;
	HKF32 c0 = c2x * c3y - c3x * c2y;

	// Should check for 0 determinant
	HKF32 invdet = 1.0f / (s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0);

	HKMat4x4 m = HK_MATH_MAT4X4_TYPE_INITIALIZER(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);

	m.c0.x = (c1y * c5 - c1z * c4 + c1w * c3) * invdet;
	m.c0.y = (-c0y * c5 + c0z * c4 - c0w * c3) * invdet;
	m.c0.z = (c3y * s5 - c3z * s4 + c3w * s3) * invdet;
	m.c0.w = (-c2y * s5 + c2z * s4 - c2w * s3) * invdet;

	m.c1.x = (-c1x * c5 + c1z * c2 - c1w * c1) * invdet;
	m.c1.y = (c0x * c5 - c0z * c2 + c0w * c1) * invdet;
	m.c1.z = (-c3x * s5 + c3z * s2 - c3w * s1) * invdet;
	m.c1.w = (c2x * s5 - c2z * s2 + c2w * s1) * invdet;

	m.c2.x = (c1x * c4 - c1y * c2 + c1w * c0) * invdet;
	m.c2.y = (-c0x * c4 + c0y * c2 - c0w * c0) * invdet;
	m.c2.z = (c3x * s4 - c3y * s2 + c3w * s0) * invdet;
	m.c2.w = (-c2x * s4 + c2y * s2 - c2w * s0) * invdet;

	m.c3.x = (-c1x * c3 + c1y * c1 - c1z * c0) * invdet;
	m.c3.y = (c0x * c3 - c0y * c1 + c0z * c0) * invdet;
	m.c3.z = (-c3x * s3 + c3y * s1 - c3z * s0) * invdet;
	m.c3.w = (c2x * s3 - c2y * s1 + c2z * s0) * invdet;

	return m;
}
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 HKMat4x4_inverse(const HKMat4x4* m1) HK_CXX_NOEXCEPT { return HKMat4x4_inverse_stack(HK_MATH_MAT4X4_PASS_ARGUMENT_TO_STACK((*m1))); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 HKMat4x4_inverseTranspose(const HKMat4x4* m1) HK_CXX_NOEXCEPT { return HKMat4x4_inverse_stack(HK_MATH_MAT4X4_PASS_ARGUMENT_TO_STACK_TRANSPOSE((*m1))); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat4x4_equal_withEps(const HKMat4x4* m1, const HKMat4x4* m2, HKF32 eps) HK_CXX_NOEXCEPT {
	return HKMat4x4_determinant_stack(HK_MATH_MAT4X4_ARITHMETRIC_PASS_ARGUMENT_TO_STACK((*m1),-,(*m2))) < HKMath_fmaxf(HKMat4x4_determinant(m1), HKMat4x4_determinant(m2)) * eps * eps * eps;
}
HK_INLINE HK_CXX11_CONSTEXPR HKBool   HKMat4x4_equal(const HKMat4x4* m1, const HKMat4x4* m2) HK_CXX_NOEXCEPT { return HKMat4x4_equal_withEps(m1, m2, HK_MATH_MAT_EQUAL_EPS); }
#if defined(__cplusplus)
HK_INLINE HK_CXX11_CONSTEXPR HKBool operator==(const HKMat2x2& m1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return  HKMat2x2_equal(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool operator!=(const HKMat2x2& m1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return !HKMat2x2_equal(&m1, &m2); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& HKMat2x2::operator+=(const HKMat2x2& m) HK_CXX_NOEXCEPT { HKMat2x2_assignAdd(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& HKMat2x2::operator-=(const HKMat2x2& m) HK_CXX_NOEXCEPT { HKMat2x2_assignSub(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& HKMat2x2::operator*=(HKF32 s) HK_CXX_NOEXCEPT { HKMat2x2_assignMul_s2(this, s); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2& HKMat2x2::operator/=(HKF32 s) HK_CXX_NOEXCEPT { HKMat2x2_assignDiv_s2(this, s); return *this; }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator+(const HKMat2x2& m1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return HKMat2x2_add(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator-(const HKMat2x2& m1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return HKMat2x2_sub(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator*(HKF32           s1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return HKMat2x2_mul_s1(s1,&m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator*(const HKMat2x2& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat2x2_mul_s2(&m1,s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator/(const HKMat2x2& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat2x2_div_s2(&m1,s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 operator*(const HKMat2x2& m1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return HKMat2x2_mul(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 operator*(const HKVec2& v1, const HKMat2x2& m2) HK_CXX_NOEXCEPT { return HKMat2x2_mulVector_v1(&v1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 operator*(const HKMat2x2& m1, const HKVec2& v2) HK_CXX_NOEXCEPT { return HKMat2x2_mulVector_v2(&m1, &v2); }
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat2x2::determinant() const HK_CXX_NOEXCEPT { return HKMat2x2_determinant(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2::transpose() const HK_CXX_NOEXCEPT { return HKMat2x2_transpose(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 HKMat2x2::inverse() const HK_CXX_NOEXCEPT { return HKMat2x2_inverse(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat2x2 HKMat2x2::inverseTranspose() const HK_CXX_NOEXCEPT { return HKMat2x2_transpose(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2::getR0() const HK_CXX_NOEXCEPT { return HKMat2x2_rowVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2::getR1() const HK_CXX_NOEXCEPT { return HKMat2x2_rowVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2::getC0() const HK_CXX_NOEXCEPT { return HKMat2x2_colVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec2 HKMat2x2::getC1() const HK_CXX_NOEXCEPT { return HKMat2x2_colVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2::identity() HK_CXX_NOEXCEPT { return HKMat2x2_identity(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2::zeros() HK_CXX_NOEXCEPT { return HKMat2x2_zeros(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat2x2 HKMat2x2::scale(const HKVec2& scaling) HK_CXX_NOEXCEPT { return HKMat2x2_scale_2(&scaling); }

HK_INLINE HK_CXX11_CONSTEXPR HKBool operator==(const HKMat3x3& m1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return  HKMat3x3_equal(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool operator!=(const HKMat3x3& m1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return !HKMat3x3_equal(&m1, &m2); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& HKMat3x3::operator+=(const HKMat3x3& m) HK_CXX_NOEXCEPT { HKMat3x3_assignAdd(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& HKMat3x3::operator-=(const HKMat3x3& m) HK_CXX_NOEXCEPT { HKMat3x3_assignSub(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& HKMat3x3::operator*=(HKF32 s) HK_CXX_NOEXCEPT { HKMat3x3_assignMul_s2(this, s); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3& HKMat3x3::operator/=(HKF32 s) HK_CXX_NOEXCEPT { HKMat3x3_assignDiv_s2(this, s); return *this; }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator+(const HKMat3x3& m1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return HKMat3x3_add(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator-(const HKMat3x3& m1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return HKMat3x3_sub(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator*(HKF32           s1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return HKMat3x3_mul_s1(s1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator*(const HKMat3x3& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat3x3_mul_s2(&m1, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator/(const HKMat3x3& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat3x3_div_s2(&m1, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 operator*(const HKMat3x3& m1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return HKMat3x3_mul(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 operator*(const HKVec3& v1, const HKMat3x3& m2) HK_CXX_NOEXCEPT { return HKMat3x3_mulVector_v1(&v1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 operator*(const HKMat3x3& m1, const HKVec3& v2) HK_CXX_NOEXCEPT { return HKMat3x3_mulVector_v2(&m1, &v2); }
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat3x3::determinant() const HK_CXX_NOEXCEPT { return HKMat3x3_determinant(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::transpose() const HK_CXX_NOEXCEPT { return HKMat3x3_transpose(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 HKMat3x3::inverse() const HK_CXX_NOEXCEPT { return HKMat3x3_inverse(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat3x3 HKMat3x3::inverseTranspose() const HK_CXX_NOEXCEPT { return HKMat3x3_transpose(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getR0() const HK_CXX_NOEXCEPT { return HKMat3x3_rowVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getR1() const HK_CXX_NOEXCEPT { return HKMat3x3_rowVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getR2() const HK_CXX_NOEXCEPT { return HKMat3x3_rowVector2(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getC0() const HK_CXX_NOEXCEPT { return HKMat3x3_colVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getC1() const HK_CXX_NOEXCEPT { return HKMat3x3_colVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec3 HKMat3x3::getC2() const HK_CXX_NOEXCEPT { return HKMat3x3_colVector2(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::identity() HK_CXX_NOEXCEPT { return HKMat3x3_identity(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::zeros() HK_CXX_NOEXCEPT { return HKMat3x3_zeros(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::scale(const HKVec2& scaling) HK_CXX_NOEXCEPT { return HKMat3x3_scale_2(&scaling); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::scale(const HKVec3& scaling) HK_CXX_NOEXCEPT { return HKMat3x3_scale_3(&scaling); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat3x3 HKMat3x3::translate(const HKVec2& position) HK_CXX_NOEXCEPT { return HKMat3x3_translate_2(&position); }

HK_INLINE HK_CXX11_CONSTEXPR HKBool operator==(const HKMat4x4& m1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return  HKMat4x4_equal(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKBool operator!=(const HKMat4x4& m1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return !HKMat4x4_equal(&m1, &m2); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& HKMat4x4::operator+=(const HKMat4x4& m) HK_CXX_NOEXCEPT { HKMat4x4_assignAdd(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& HKMat4x4::operator-=(const HKMat4x4& m) HK_CXX_NOEXCEPT { HKMat4x4_assignSub(this, &m); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& HKMat4x4::operator*=(HKF32 s) HK_CXX_NOEXCEPT { HKMat4x4_assignMul_s2(this, s); return *this; }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4& HKMat4x4::operator/=(HKF32 s) HK_CXX_NOEXCEPT { HKMat4x4_assignDiv_s2(this, s); return *this; }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator+(const HKMat4x4& m1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return HKMat4x4_add(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator-(const HKMat4x4& m1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return HKMat4x4_sub(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator*(HKF32           s1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return HKMat4x4_mul_s1(s1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator*(const HKMat4x4& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat4x4_mul_s2(&m1, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator/(const HKMat4x4& m1, HKF32           s2) HK_CXX_NOEXCEPT { return HKMat4x4_div_s2(&m1, s2); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 operator*(const HKMat4x4& m1, const HKMat4x4& m2) HK_CXX_NOEXCEPT { return HKMat4x4_mul(&m1, &m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 operator*(const HKVec4& v1,const HKMat4x4&  m2) HK_CXX_NOEXCEPT { return HKMat4x4_mulVector_v1(&v1,&m2); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 operator*(const HKMat4x4& m1, const HKVec4& v2) HK_CXX_NOEXCEPT { return HKMat4x4_mulVector_v2(&m1,&v2); }
HK_INLINE HK_CXX11_CONSTEXPR HKF32    HKMat4x4::determinant() const HK_CXX_NOEXCEPT { return HKMat4x4_determinant(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::transpose() const HK_CXX_NOEXCEPT { return HKMat4x4_transpose(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 HKMat4x4::inverse() const HK_CXX_NOEXCEPT { return HKMat4x4_inverse(this); }
HK_INLINE HK_CXX14_CONSTEXPR HKMat4x4 HKMat4x4::inverseTranspose() const HK_CXX_NOEXCEPT { return HKMat4x4_transpose(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getR0() const HK_CXX_NOEXCEPT { return HKMat4x4_rowVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getR1() const HK_CXX_NOEXCEPT { return HKMat4x4_rowVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getR2() const HK_CXX_NOEXCEPT { return HKMat4x4_rowVector2(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getR3() const HK_CXX_NOEXCEPT { return HKMat4x4_rowVector3(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getC0() const HK_CXX_NOEXCEPT { return HKMat4x4_colVector0(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getC1() const HK_CXX_NOEXCEPT { return HKMat4x4_colVector1(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getC2() const HK_CXX_NOEXCEPT { return HKMat4x4_colVector2(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKVec4 HKMat4x4::getC3() const HK_CXX_NOEXCEPT { return HKMat4x4_colVector3(this); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::identity() HK_CXX_NOEXCEPT { return HKMat4x4_identity(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::zeros() HK_CXX_NOEXCEPT { return HKMat4x4_zeros(); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::scale(const HKVec3& scaling) HK_CXX_NOEXCEPT { return HKMat4x4_scale_3(&scaling); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::scale(const HKVec4& scaling) HK_CXX_NOEXCEPT { return HKMat4x4_scale_4(&scaling); }
HK_INLINE HK_CXX11_CONSTEXPR HKMat4x4 HKMat4x4::translate(const HKVec3& position) HK_CXX_NOEXCEPT { return HKMat4x4_translate_3(&position); }
#endif
#endif
